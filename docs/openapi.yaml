openapi: 3.0.3
info:
  title: Trendora API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PaginationMeta:
      type: object
      properties:
        current_page: { type: integer }
        per_page: { type: integer }
        total: { type: integer }
        last_page: { type: integer }
    Product:
      type: object
      required: [id, name, price, cost_price, brand, category, stock_quantity, is_active]
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string, nullable: true }
        price: { type: number }
        cost_price: { type: number }
        brand: { type: string }
        category: { type: string, nullable: true }
        stock_quantity: { type: integer }
        is_active: { type: boolean }
        image_url: { type: string, nullable: true }
        created_at: { type: string }
        updated_at: { type: string }
    User:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string }
        contact: { type: string, nullable: true }
        role: { type: string, enum: [admin, user, customer] }
        is_active: { type: boolean }
        can_create_product: { type: boolean }
        can_update_product: { type: boolean }
        can_delete_product: { type: boolean }
        created_at: { type: string }
    Profile:
      type: object
      properties:
        id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        email: { type: string }
        contact: { type: string, nullable: true }
        role: { type: string, enum: [admin, user, customer] }
        profile_image: { type: string, nullable: true }
        address: { type: string, nullable: true }
        date_of_birth: { type: string, nullable: true }
    CartItem:
      type: object
      properties:
        id: { type: integer }
        product_id: { type: integer }
        quantity: { type: integer }
        product:
          $ref: '#/components/schemas/Product'
paths:
  /products:
    get:
      security: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: brand
          schema: { type: string }
        - in: query
          name: category
          schema: { type: string }
        - in: query
          name: min_price
          schema: { type: number }
        - in: query
          name: max_price
          schema: { type: number }
        - in: query
          name: min_rating
          schema: { type: number }
        - in: query
          name: is_active
          schema: { type: boolean }
        - in: query
          name: sort
          schema: { type: string, default: created_at }
        - in: query
          name: sort_direction
          schema: { type: string, enum: [asc, desc], default: desc }
        - in: query
          name: per_page
          schema: { type: integer, default: 12 }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  meta: { $ref: '#/components/schemas/PaginationMeta' }
    post:
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price, cost_price, brand, stock_quantity, is_active]
              properties:
                name: { type: string }
                description: { type: string }
                price: { type: number }
                cost_price: { type: number }
                brand: { type: string }
                category: { type: string }
                stock_quantity: { type: integer }
                is_active: { type: boolean }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }
  /products/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }
    put:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                price: { type: number }
                cost_price: { type: number }
                brand: { type: string }
                category: { type: string }
                stock_quantity: { type: integer }
                is_active: { type: boolean }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }
    delete:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
  /products/{id}/toggle-active:
    patch:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Product' }
  /products/{id}/image:
    post:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required: [image]
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_url: { type: string }
  /cart:
    get:
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/CartItem' }
    delete:
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
  /cart/items:
    get:
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/CartItem' }
    post:
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [product_id, quantity]
              properties:
                product_id: { type: integer }
                quantity: { type: integer, minimum: 1 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/CartItem' }
  /cart/items/{id}:
    patch:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/CartItem' }
    delete:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
  /profile:
    get:
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
    put:
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name: { type: string }
                last_name: { type: string }
                email: { type: string }
                contact: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
  /admin/users:
    get:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: role
          schema: { type: string, enum: [admin, user, customer] }
        - in: query
          name: is_active
          schema: { type: boolean }
        - in: query
          name: per_page
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  meta: { $ref: '#/components/schemas/PaginationMeta' }
    post:
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [first_name,last_name,email,password,role]
              properties:
                role: { type: string, enum: [admin, user, customer] }
                first_name: { type: string }
                last_name: { type: string }
                email: { type: string }
                contact: { type: string }
                password: { type: string }
                is_active: { type: boolean }
                can_create_product: { type: boolean }
                can_update_product: { type: boolean }
                can_delete_product: { type: boolean }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/User' }
  /admin/users/{id}:
    patch:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string }
                is_active: { type: boolean }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/User' }
    delete:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
  /admin/users/{id}/toggle-active:
    patch:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/User' }
  /admin/users/{id}/privileges:
    patch:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                can_create_product: { type: boolean }
                can_update_product: { type: boolean }
                can_delete_product: { type: boolean }
      responses:
        '200': { description: OK }
  /admin/customers:
    get:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: is_active
          schema: { type: boolean }
        - in: query
          name: per_page
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  meta: { $ref: '#/components/schemas/PaginationMeta' }
  /admin/customers/{id}/toggle-active:
    patch:
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/User' }
